document.addEventListener('DOMContentLoaded', function() {
    // Check if user is logged in
    const token = localStorage.getItem('token');
    if (!token) {
        // Redirect to login page if not logged in
        window.location.href = '../login.html';
        return;
    }

    // Get DOM elements
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebar = document.querySelector('.sidebar');
    const profileIcon = document.querySelector('.profile-icon');
    const logoutBtn = document.getElementById('logout-btn');
    const logoutLink = document.getElementById('logout-link');
    const facultyName = document.getElementById('faculty-name');
    const welcomeName = document.getElementById('welcome-name');
    
    // Toggle sidebar on mobile
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', function() {
            sidebar.classList.toggle('active');
        });
    }
    
    // Toggle profile dropdown
    if (profileIcon) {
        profileIcon.addEventListener('click', function() {
            this.classList.toggle('active');
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            if (!profileIcon.contains(event.target)) {
                profileIcon.classList.remove('active');
            }
        });
    }
    
    // Handle logout
    function handleLogout(e) {
        e.preventDefault();
        localStorage.removeItem('token');
        localStorage.removeItem('userData');
        window.location.href = '../login.html';
    }
    
    if (logoutBtn) logoutBtn.addEventListener('click', handleLogout);
    if (logoutLink) logoutLink.addEventListener('click', handleLogout);
    
    // Set faculty name (replace with actual user data retrieval)
    try {
        const userData = JSON.parse(localStorage.getItem('userData'));
        if (userData && userData.name) {
            if (facultyName) facultyName.textContent = userData.name;
            if (welcomeName) welcomeName.textContent = userData.name;
        } else {
            // Use mock data if we don't have user data
            if (facultyName) facultyName.textContent = "Dr. Smith";
            if (welcomeName) welcomeName.textContent = "Dr. Smith";
        }
    } catch (error) {
        console.error('Error retrieving user data:', error);
        if (facultyName) facultyName.textContent = "Faculty Member";
        if (welcomeName) welcomeName.textContent = "Faculty Member";
    }
    
    // Load dashboard data
    loadDashboardStats();
    loadFacultyCourses();
});

// Load dashboard statistics
async function loadDashboardStats() {
    try {
        const token = localStorage.getItem('token');
        if (!token) {
            console.error('No authentication token found');
            return;
        }

        const response = await fetch('/api/faculty/dashboard/summary', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`Failed to fetch dashboard data: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.success) {
            updateDashboardStats(data.summary);
            updateRecentAttendance(data.summary.recentAttendance);
        } else {
            console.error('API returned error:', data.message);
            // Fallback to mock data if API fails
            const mockStats = {
                courseCount: 4,
                studentCount: 120,
                sessionCount: 24
            };
            updateDashboardStats(mockStats);
        }
    } catch (error) {
        console.error('Error loading dashboard stats:', error);
        // Fallback to mock data if API fails
        const mockStats = {
            courseCount: 4,
            studentCount: 120,
            sessionCount: 24
        };
        updateDashboardStats(mockStats);
    }
}

// Update dashboard statistics in the DOM
function updateDashboardStats(stats) {
    const courseCount = document.getElementById('course-count');
    const studentCount = document.getElementById('student-count');
    const sessionCount = document.getElementById('session-count');
    
    if (courseCount) courseCount.textContent = stats.courseCount || 0;
    if (studentCount) studentCount.textContent = stats.studentCount || 0;
    if (sessionCount) sessionCount.textContent = stats.sessionCount || 0;
}

// Update the recent attendance section
function updateRecentAttendance(attendanceData) {
    const recentAttendanceContainer = document.getElementById('recent-attendance');
    if (!recentAttendanceContainer || !attendanceData || !attendanceData.length) return;

    recentAttendanceContainer.innerHTML = '';

    attendanceData.forEach(record => {
        const attendanceCard = document.createElement('div');
        attendanceCard.className = 'attendance-card';
        
        const percentage = record.attendance_percentage || 0;
        let statusClass = 'low';
        if (percentage >= 80) statusClass = 'high';
        else if (percentage >= 60) statusClass = 'medium';
        
        attendanceCard.innerHTML = `
            <div class="course-header">
                <h4>${record.course_code}</h4>
                <span class="date">${new Date(record.attendance_date).toLocaleDateString()}</span>
            </div>
            <div class="course-title">${record.course_title}</div>
            <div class="attendance-stats">
                <div class="attendance-bar">
                    <div class="attendance-progress ${statusClass}" style="width: ${percentage}%"></div>
                </div>
                <div class="attendance-numbers">
                    <div class="attendance-percentage">${percentage}%</div>
                    <div class="attendance-details">
                        <span class="present">${record.present_count} present</span> /
                        <span class="absent">${record.absent_count} absent</span>
                    </div>
                </div>
            </div>
        `;
        
        recentAttendanceContainer.appendChild(attendanceCard);
    });
}

// Load faculty courses
async function loadFacultyCourses() {
    const courseListElement = document.getElementById('faculty-course-list');
    if (!courseListElement) return;
    
    try {
        const token = localStorage.getItem('token');
        if (!token) {
            console.error('No authentication token found');
            return;
        }

        const response = await fetch('/api/faculty/courses', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`Failed to fetch courses: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.success && data.courses && data.courses.length > 0) {
            renderCourseList(data.courses, courseListElement);
        } else {
            console.error('API returned error or no courses:', data.message);
            // Fallback to mock data
            renderMockCourses(courseListElement);
        }
    } catch (error) {
        console.error('Error loading faculty courses:', error);
        // Fallback to mock data
        renderMockCourses(courseListElement);
    }
    
}

/**
 * Renders courses from the API response
 * @param {Array} courses - The courses data from API
 * @param {HTMLElement} containerElement - The DOM element to render into
 */
function renderCourseList(courses, containerElement) {
    if (!courses || courses.length === 0) {
        containerElement.innerHTML = '<div class="empty-state"><p>You are not teaching any courses.</p></div>';
        return;
    }
    
    let coursesHTML = '';
    
    courses.forEach(course => {
        // For attendance rate, we'd ideally get this from the API or calculate it
        // For now, using a mock value based on course_id to simulate different rates
        const mockAttendanceRate = ((course.course_id * 7) % 30) + 70; // Will be between 70 and 99
        
        // Determine color based on attendance rate
        let statusColor = mockAttendanceRate >= 90 ? 'var(--success-color)' : 
                        mockAttendanceRate >= 80 ? 'var(--warning-color)' : 
                        'var(--danger-color)';
        
        coursesHTML += `
            <div class="course-card">
                <div class="course-header">
                    <h3>${course.course_title}</h3>
                    <span class="course-code">${course.course_code}</span>
                </div>
                <div class="course-info">
                    <p><i class="fas fa-book"></i> ${course.credit_hours} Credit Hours</p>
                    <p><i class="fas fa-layer-group"></i> Section ${course.section_name}</p>
                    <p><i class="fas fa-calendar"></i> ${course.semester}</p>
                </div>
                <div class="course-attendance">
                    <div class="attendance-bar">
                        <div class="attendance-progress" style="width: ${mockAttendanceRate}%; background-color: ${statusColor};"></div>
                    </div>
                    <span>${mockAttendanceRate}% Average Attendance</span>
                </div>
                <div class="course-actions">
                    <a href="mark-attendance.html?id=${course.course_id}" class="btn-small">Mark Attendance</a>
                    <a href="manage-students.html?id=${course.course_id}" class="btn-small" style="margin-left: 5px;">View Students</a>
                </div>
            </div>
        `;
    });
    
    containerElement.innerHTML = coursesHTML;
}

/**
 * Renders mock course data when API fails
 * @param {HTMLElement} containerElement - The DOM element to render into
 */
function renderMockCourses(containerElement) {
    const mockCourses = [
        {
            id: "CS101",
            name: "Introduction to Programming",
            students: 45,
            schedule: "Tue, Thu 11:00 AM",
            attendanceRate: 85
        },
        {
            id: "CS201",
            name: "Data Structures",
            students: 35,
            schedule: "Mon, Wed, Fri 9:00 AM",
            attendanceRate: 76
        },
        {
            id: "CS360",
            name: "Software Engineering",
            students: 25,
            schedule: "Thu 3:00 PM",
            attendanceRate: 94
        }
    ];
    
    let coursesHTML = '';
    
    mockCourses.forEach(course => {
        // Determine color based on attendance rate
        let statusColor = course.attendanceRate >= 90 ? 'var(--success-color)' : 
                        course.attendanceRate >= 80 ? 'var(--warning-color)' : 
                        'var(--danger-color)';
        
        coursesHTML += `
            <div class="course-card">
                <div class="course-header">
                    <h3>${course.name}</h3>
                    <span class="course-code">${course.id}</span>
                </div>
                <div class="course-info">
                    <p><i class="fas fa-users"></i> ${course.students} Students</p>
                    <p><i class="fas fa-clock"></i> ${course.schedule}</p>
                </div>
                <div class="course-attendance">
                    <div class="attendance-bar">
                        <div class="attendance-progress" style="width: ${course.attendanceRate}%; background-color: ${statusColor};"></div>
                    </div>
                    <span>${course.attendanceRate}% Average Attendance</span>
                </div>
                <div class="course-actions">
                    <a href="mark-attendance.html?id=${course.id}" class="btn-small">Mark Attendance</a>
                    <a href="manage-students.html?id=${course.id}" class="btn-small" style="margin-left: 5px;">View Students</a>
                </div>
            </div>
        `;
    });
    
    containerElement.innerHTML = coursesHTML;
}
}

